"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const node_support_1 = require("./node-support");
const requestUtils_1 = require("./requestUtils");
class BaseRestClient {
    constructor(key, secret, baseUrl, options = {}, requestOptions = {}, clientType) {
        this.timeOffset = null;
        this.syncTimePromise = null;
        this.clientType = clientType;
        this.options = Object.assign({ recv_window: 5000, 
            // how often to sync time drift with bybit servers
            sync_interval_ms: 3600000, 
            // if true, we'll throw errors if any params are undefined
            strict_param_validation: false }, options);
        this.globalRequestOptions = Object.assign(Object.assign({ 
            // in ms == 5 minutes by default
            timeout: 1000 * 60 * 5 }, requestOptions), { headers: {
                'x-referer': 'bybitapinode',
            } });
        this.baseUrl = baseUrl;
        if (key && !secret) {
            throw new Error('API Key & Secret are both required for private enpoints');
        }
        if (this.options.disable_time_sync !== true) {
            this.syncTime();
            setInterval(this.syncTime.bind(this), +this.options.sync_interval_ms);
        }
        this.key = key;
        this.secret = secret;
    }
    isSpotClient() {
        return this.clientType === requestUtils_1.REST_CLIENT_TYPE_ENUM.spot;
    }
    get(endpoint, params) {
        return this._call('GET', endpoint, params, true);
    }
    post(endpoint, params) {
        return this._call('POST', endpoint, params, true);
    }
    getPrivate(endpoint, params) {
        return this._call('GET', endpoint, params, false);
    }
    postPrivate(endpoint, params) {
        return this._call('POST', endpoint, params, false);
    }
    deletePrivate(endpoint, params) {
        return this._call('DELETE', endpoint, params, false);
    }
    prepareSignParams(params, isPublicApi) {
        return __awaiter(this, void 0, void 0, function* () {
            if (isPublicApi) {
                return {
                    originalParams: params,
                    paramsWithSign: params,
                };
            }
            if (!this.key || !this.secret) {
                throw new Error('Private endpoints require api and private keys set');
            }
            if (this.timeOffset === null) {
                yield this.syncTime();
            }
            return this.signRequest(params);
        });
    }
    /**
     * @private Make a HTTP request to a specific endpoint. Private endpoints are automatically signed.
     */
    _call(method, endpoint, params, isPublicApi) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const options = Object.assign(Object.assign({}, this.globalRequestOptions), { url: [this.baseUrl, endpoint].join(endpoint.startsWith('/') ? '' : '/'), method: method, json: true });
            for (const key in params) {
                if (typeof params[key] === 'undefined') {
                    delete params[key];
                }
            }
            const signResult = yield this.prepareSignParams(params, isPublicApi);
            if (method === 'GET' || this.isSpotClient()) {
                options.params = signResult.paramsWithSign;
                if ((_a = options.params) === null || _a === void 0 ? void 0 : _a.agentSource) {
                    options.data = {
                        agentSource: requestUtils_1.agentSource,
                    };
                }
            }
            else {
                options.data = signResult.paramsWithSign;
            }
            return axios_1.default(options)
                .then((response) => {
                if (response.status == 200) {
                    return response.data;
                }
                throw response;
            })
                .catch((e) => this.parseException(e));
        });
    }
    /**
     * @private generic handler to parse request exceptions
     */
    parseException(e) {
        if (this.options.parse_exceptions === false) {
            throw e;
        }
        // Something happened in setting up the request that triggered an Error
        if (!e.response) {
            if (!e.request) {
                throw e.message;
            }
            // request made but no response received
            throw e;
        }
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        const response = e.response;
        throw {
            code: response.status,
            message: response.statusText,
            body: response.data,
            headers: response.headers,
            requestOptions: this.options,
        };
    }
    /**
     * @private sign request and set recv window
     */
    signRequest(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = {
                originalParams: Object.assign(Object.assign({}, data), { api_key: this.key, timestamp: Date.now() + (this.timeOffset || 0) }),
                sign: '',
            };
            // Optional, set to 5000 by default. Increase if timestamp/recv_window errors are seen.
            if (this.options.recv_window && !res.originalParams.recv_window) {
                if (this.isSpotClient()) {
                    res.originalParams.recvWindow = this.options.recv_window;
                }
                else {
                    res.originalParams.recv_window = this.options.recv_window;
                }
            }
            if (this.key && this.secret) {
                const serializedParams = requestUtils_1.serializeParams(res.originalParams, this.options.strict_param_validation);
                res.sign = yield node_support_1.signMessage(serializedParams, this.secret);
                res.paramsWithSign = Object.assign(Object.assign({}, res.originalParams), { sign: res.sign });
            }
            return res;
        });
    }
    /**
     * Trigger time sync and store promise
     */
    syncTime() {
        if (this.options.disable_time_sync === true) {
            return Promise.resolve(false);
        }
        if (this.syncTimePromise !== null) {
            return this.syncTimePromise;
        }
        this.syncTimePromise = this.fetchTimeOffset().then((offset) => {
            this.timeOffset = offset;
            this.syncTimePromise = null;
        });
        return this.syncTimePromise;
    }
    /**
     * Estimate drift based on client<->server latency
     */
    fetchTimeOffset() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const start = Date.now();
                const serverTime = yield this.fetchServerTime();
                if (!serverTime || isNaN(serverTime)) {
                    throw new Error(`fetchServerTime() returned non-number: "${serverTime}" typeof(${typeof serverTime})`);
                }
                const end = Date.now();
                const severTimeMs = serverTime * 1000;
                const avgDrift = (end - start) / 2;
                return Math.ceil(severTimeMs - end + avgDrift);
            }
            catch (e) {
                console.error('Failed to fetch get time offset: ', e);
                return 0;
            }
        });
    }
}
exports.default = BaseRestClient;
//# sourceMappingURL=BaseRestClient.js.map