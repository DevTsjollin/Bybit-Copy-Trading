import { AxiosRequestConfig } from 'axios';
import { RestClientOptions } from './util/requestUtils';
import { APIResponse, APIResponseWithTime, AssetExchangeRecordsReq, CoinParam, SymbolInfo, SymbolIntervalFromLimitParam, SymbolLimitParam, SymbolParam, SymbolPeriodLimitParam, WalletFundRecordsReq, WithdrawRecordsReq } from './types/shared';
import { linearPositionModeEnum, positionTpSlModeEnum } from './constants/enum';
import BaseRestClient from './util/BaseRestClient';
export declare class LinearClient extends BaseRestClient {
    /**
     * @public Creates an instance of the linear (USD Perps) REST API client.
     *
     * @param {string} key - your API key
     * @param {string} secret - your API secret
     * @param {boolean} [useLivenet=false]
     * @param {RestClientOptions} [restClientOptions={}] options to configure REST API connectivity
     * @param {AxiosRequestConfig} [requestOptions={}] HTTP networking options for axios
     */
    constructor(key?: string | undefined, secret?: string | undefined, useLivenet?: boolean, restClientOptions?: RestClientOptions, requestOptions?: AxiosRequestConfig);
    fetchServerTime(): Promise<number>;
    /**
     *
     * Market Data Endpoints
     *
     */
    getOrderBook(params: SymbolParam): Promise<APIResponseWithTime<any[]>>;
    getKline(params: SymbolIntervalFromLimitParam): Promise<APIResponseWithTime<any[]>>;
    /**
     * Get latest information for symbol
     */
    getTickers(params?: Partial<SymbolParam>): Promise<APIResponseWithTime<any[]>>;
    getTrades(params: SymbolLimitParam): Promise<APIResponseWithTime<any[]>>;
    getSymbols(): Promise<APIResponse<SymbolInfo[]>>;
    getLastFundingRate(params: SymbolParam): Promise<APIResponseWithTime<any[]>>;
    getMarkPriceKline(params: SymbolIntervalFromLimitParam): Promise<APIResponseWithTime<any[]>>;
    getIndexPriceKline(params: SymbolIntervalFromLimitParam): Promise<APIResponseWithTime<any[]>>;
    getPremiumIndexKline(params: SymbolIntervalFromLimitParam): Promise<APIResponseWithTime<any[]>>;
    /**
     *
     * Market Data : Advanced
     *
     */
    getOpenInterest(params: SymbolPeriodLimitParam): Promise<APIResponseWithTime<any[]>>;
    getLatestBigDeal(params: SymbolLimitParam): Promise<APIResponseWithTime<any[]>>;
    getLongShortRatio(params: SymbolPeriodLimitParam): Promise<APIResponseWithTime<any[]>>;
    /**
     *
     * Account Data Endpoints
     *
     */
    getApiKeyInfo(): Promise<APIResponseWithTime<any>>;
    /**
     *
     * Wallet Data Endpoints
     *
     */
    getWalletBalance(params?: Partial<CoinParam>): Promise<APIResponseWithTime<any>>;
    getWalletFundRecords(params?: WalletFundRecordsReq): Promise<APIResponseWithTime<any>>;
    getWithdrawRecords(params?: WithdrawRecordsReq): Promise<APIResponseWithTime<any>>;
    getAssetExchangeRecords(params?: AssetExchangeRecordsReq): Promise<APIResponseWithTime<any>>;
    /**
     *
     * API Data Endpoints
     *
     */
    getServerTime(): Promise<APIResponseWithTime<{}>>;
    getApiAnnouncements(): Promise<APIResponseWithTime<any>>;
    /**
     *
     * Account Data Endpoints
     *
     */
    placeActiveOrder(params: {
        side: string;
        symbol: string;
        order_type: string;
        qty: number;
        price?: number;
        time_in_force: string;
        take_profit?: number;
        stop_loss?: number;
        tp_trigger_by?: string;
        sl_trigger_by?: string;
        reduce_only: boolean;
        close_on_trigger: boolean;
        order_link_id?: string;
        position_idx?: number;
    }): Promise<APIResponseWithTime<any>>;
    getActiveOrderList(params: {
        order_id?: string;
        order_link_id?: string;
        symbol: string;
        order?: string;
        page?: number;
        limit?: number;
        order_status?: string;
    }): Promise<APIResponseWithTime<any>>;
    cancelActiveOrder(params: {
        symbol: string;
        order_id?: string;
        order_link_id?: string;
    }): Promise<APIResponseWithTime<any>>;
    cancelAllActiveOrders(params: SymbolParam): Promise<APIResponseWithTime<any>>;
    replaceActiveOrder(params: {
        order_id?: string;
        order_link_id?: string;
        symbol: string;
        p_r_qty?: number;
        p_r_price?: number;
        take_profit?: number;
        stop_loss?: number;
        tp_trigger_by?: string;
        sl_trigger_by?: string;
    }): Promise<APIResponseWithTime<any>>;
    queryActiveOrder(params: {
        order_id?: string;
        order_link_id?: string;
        symbol: string;
    }): Promise<APIResponseWithTime<any>>;
    /**
     * Conditional orders
     */
    placeConditionalOrder(params: {
        side: string;
        symbol: string;
        order_type: string;
        qty: number;
        price?: number;
        base_price: number;
        stop_px: number;
        time_in_force: string;
        trigger_by?: string;
        close_on_trigger?: boolean;
        order_link_id?: string;
        reduce_only: boolean;
        take_profit?: number;
        stop_loss?: number;
        tp_trigger_by?: string;
        sl_trigger_by?: string;
    }): Promise<APIResponseWithTime<any>>;
    getConditionalOrder(params: {
        stop_order_id?: string;
        order_link_id?: string;
        symbol: string;
        stop_order_status?: string;
        order?: string;
        page?: number;
        limit?: number;
    }): Promise<APIResponseWithTime<any>>;
    cancelConditionalOrder(params: {
        symbol: string;
        stop_order_id?: string;
        order_link_id?: string;
    }): Promise<APIResponseWithTime<any>>;
    cancelAllConditionalOrders(params: SymbolParam): Promise<APIResponseWithTime<any>>;
    replaceConditionalOrder(params: {
        stop_order_id?: string;
        order_link_id?: string;
        symbol: string;
        p_r_qty?: number;
        p_r_price?: number;
        p_r_trigger_price?: number;
        take_profit?: number;
        stop_loss?: number;
        tp_trigger_by?: string;
        sl_trigger_by?: string;
    }): Promise<APIResponseWithTime<any>>;
    queryConditionalOrder(params: {
        symbol: string;
        stop_order_id?: string;
        order_link_id?: string;
    }): Promise<APIResponseWithTime<any>>;
    /**
     * Position
     */
    getPosition(params?: Partial<SymbolParam>): Promise<APIResponseWithTime<any>>;
    setAutoAddMargin(params?: {
        symbol: string;
        side: string;
        auto_add_margin: boolean;
    }): Promise<APIResponseWithTime<any>>;
    setMarginSwitch(params?: {
        symbol: string;
        is_isolated: boolean;
        buy_leverage: number;
        sell_leverage: number;
    }): Promise<APIResponseWithTime<any>>;
    /**
     * Switch between one-way vs hedge mode. Use `linearPositionModeEnum` for the mode parameter.
     */
    setPositionMode(params: {
        symbol: string;
        mode: typeof linearPositionModeEnum[keyof typeof linearPositionModeEnum];
    }): Promise<APIResponseWithTime<any>>;
    /**
     * Switch TP/SL mode between full or partial. When set to Partial, TP/SL orders may have a quantity less than the position size.
     * This is set with the setTradingStop() method. Use `positionTpSlModeEnum` for the tp_sl_mode parameter.
     */
    setPositionTpSlMode(params: {
        symbol: string;
        tp_sl_mode: typeof positionTpSlModeEnum[keyof typeof positionTpSlModeEnum];
    }): Promise<APIResponseWithTime<any>>;
    setAddReduceMargin(params?: {
        symbol: string;
        side: string;
        margin: number;
    }): Promise<APIResponseWithTime<any>>;
    setUserLeverage(params: {
        symbol: string;
        buy_leverage: number;
        sell_leverage: number;
    }): Promise<APIResponseWithTime<any>>;
    setTradingStop(params: {
        symbol: string;
        side: string;
        take_profit?: number;
        stop_loss?: number;
        trailing_stop?: number;
        tp_trigger_by?: string;
        sl_trigger_by?: string;
        sl_size?: number;
        tp_size?: number;
    }): Promise<APIResponseWithTime<any>>;
    getTradeRecords(params: {
        symbol: string;
        start_time?: number;
        end_time?: number;
        exec_type?: string;
        page?: number;
        limit?: number;
    }): Promise<APIResponseWithTime<any>>;
    getClosedPnl(params: {
        symbol: string;
        start_time?: number;
        end_time?: number;
        exec_type?: string;
        page?: number;
        limit?: number;
    }): Promise<APIResponseWithTime<any>>;
    /**
     * Risk Limit
     */
    getRiskLimitList(params: SymbolParam): Promise<APIResponseWithTime<any>>;
    setRiskLimit(params: {
        symbol: string;
        side: string;
        risk_id: number;
    }): Promise<APIResponseWithTime<any>>;
    /**
     * Funding
     */
    getPredictedFundingFee(params: SymbolParam): Promise<APIResponseWithTime<any>>;
    getLastFundingFee(params: SymbolParam): Promise<APIResponseWithTime<any>>;
}
