import { AxiosRequestConfig } from 'axios';
import { APIResponse, KlineInterval } from './types/shared';
import { NewSpotOrder, OrderSide, OrderTypeSpot, SpotOrderQueryById, SpotSymbolInfo } from './types/spot';
import BaseRestClient from './util/BaseRestClient';
import { RestClientOptions } from './util/requestUtils';
export declare class SpotClient extends BaseRestClient {
    /**
     * @public Creates an instance of the Spot REST API client.
     *
     * @param {string} key - your API key
     * @param {string} secret - your API secret
     * @param {boolean} [useLivenet=false]
     * @param {RestClientOptions} [restClientOptions={}] options to configure REST API connectivity
     * @param {AxiosRequestConfig} [requestOptions={}] HTTP networking options for axios
     */
    constructor(key?: string | undefined, secret?: string | undefined, useLivenet?: boolean, restClientOptions?: RestClientOptions, requestOptions?: AxiosRequestConfig);
    fetchServerTime(): Promise<number>;
    getServerTime(): Promise<number>;
    /**
     *
     * Market Data Endpoints
     *
     **/
    getSymbols(): Promise<APIResponse<SpotSymbolInfo[]>>;
    getOrderBook(symbol: string, limit?: number): Promise<APIResponse<any>>;
    getMergedOrderBook(symbol: string, scale?: number, limit?: number): Promise<APIResponse<any>>;
    getTrades(symbol: string, limit?: number): Promise<APIResponse<any[]>>;
    getCandles(symbol: string, interval: KlineInterval, limit?: number, startTime?: number, endTime?: number): Promise<APIResponse<any[]>>;
    get24hrTicker(symbol?: string): Promise<APIResponse<any>>;
    getLastTradedPrice(symbol?: string): Promise<APIResponse<any>>;
    getBestBidAskPrice(symbol?: string): Promise<APIResponse<any>>;
    /**
     * Account Data Endpoints
     */
    submitOrder(params: NewSpotOrder): Promise<APIResponse<any>>;
    getOrder(params: SpotOrderQueryById): Promise<APIResponse<any>>;
    cancelOrder(params: SpotOrderQueryById): Promise<APIResponse<any>>;
    cancelOrderBatch(params: {
        symbol: string;
        side?: OrderSide;
        orderTypes: OrderTypeSpot[];
    }): Promise<APIResponse<any>>;
    getOpenOrders(symbol?: string, orderId?: string, limit?: number): Promise<APIResponse<any>>;
    getPastOrders(symbol?: string, orderId?: string, limit?: number): Promise<APIResponse<any>>;
    getMyTrades(symbol?: string, limit?: number, fromId?: number, toId?: number): Promise<APIResponse<any>>;
    /**
     * Wallet Data Endpoints
     */
    getBalances(): Promise<APIResponse<any>>;
}
